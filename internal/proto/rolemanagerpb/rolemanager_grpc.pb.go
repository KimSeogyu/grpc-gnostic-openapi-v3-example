// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: rolemanagerpb/rolemanager.proto

package rolemanagerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoleManager_CreateRole_FullMethodName = "/rolemanagerpb.RoleManager/CreateRole"
)

// RoleManagerClient is the client API for RoleManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleManagerClient interface {
	CreateRole(ctx context.Context, in *CreateRole_Request, opts ...grpc.CallOption) (*CreateRole_Response, error)
}

type roleManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleManagerClient(cc grpc.ClientConnInterface) RoleManagerClient {
	return &roleManagerClient{cc}
}

func (c *roleManagerClient) CreateRole(ctx context.Context, in *CreateRole_Request, opts ...grpc.CallOption) (*CreateRole_Response, error) {
	out := new(CreateRole_Response)
	err := c.cc.Invoke(ctx, RoleManager_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleManagerServer is the server API for RoleManager service.
// All implementations must embed UnimplementedRoleManagerServer
// for forward compatibility
type RoleManagerServer interface {
	CreateRole(context.Context, *CreateRole_Request) (*CreateRole_Response, error)
	mustEmbedUnimplementedRoleManagerServer()
}

// UnimplementedRoleManagerServer must be embedded to have forward compatible implementations.
type UnimplementedRoleManagerServer struct {
}

func (UnimplementedRoleManagerServer) CreateRole(context.Context, *CreateRole_Request) (*CreateRole_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRoleManagerServer) mustEmbedUnimplementedRoleManagerServer() {}

// UnsafeRoleManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleManagerServer will
// result in compilation errors.
type UnsafeRoleManagerServer interface {
	mustEmbedUnimplementedRoleManagerServer()
}

func RegisterRoleManagerServer(s grpc.ServiceRegistrar, srv RoleManagerServer) {
	s.RegisterService(&RoleManager_ServiceDesc, srv)
}

func _RoleManager_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRole_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleManager_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).CreateRole(ctx, req.(*CreateRole_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleManager_ServiceDesc is the grpc.ServiceDesc for RoleManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rolemanagerpb.RoleManager",
	HandlerType: (*RoleManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _RoleManager_CreateRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rolemanagerpb/rolemanager.proto",
}
